{"version":3,"file":"winston.sub.js","sourceRoot":"","sources":["../../../AutoCollection/diagnostic-channel/winston.sub.ts"],"names":[],"mappings":";;AAGA,0DAA6D;AAE7D,yDAA6D;AAI7D,IAAI,OAAO,GAAsB,EAAE,CAAC;AAEpC,IAAM,mBAAmB,GAA8C;IACnE,MAAM,YAAC,EAAU;QACb,IAAM,GAAG,GAA+B;YACpC,KAAK,EAAE,yBAAa,CAAC,QAAQ;YAC7B,KAAK,EAAE,yBAAa,CAAC,QAAQ;YAC7B,IAAI,EAAE,yBAAa,CAAC,QAAQ;YAC5B,KAAK,EAAE,yBAAa,CAAC,KAAK;YAC1B,OAAO,EAAE,yBAAa,CAAC,OAAO;YAC9B,MAAM,EAAE,yBAAa,CAAC,WAAW;YACjC,IAAI,EAAE,yBAAa,CAAC,WAAW;YAC/B,KAAK,EAAE,yBAAa,CAAC,OAAO;SAC/B,CAAC;QAEF,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,SAAS,GAAG,yBAAa,CAAC,WAAW,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;IACvE,CAAC;IACD,GAAG,YAAC,EAAU;QACV,IAAM,GAAG,GAA+B;YACpC,KAAK,EAAE,yBAAa,CAAC,KAAK;YAC1B,IAAI,EAAE,yBAAa,CAAC,OAAO;YAC3B,IAAI,EAAE,yBAAa,CAAC,WAAW;YAC/B,OAAO,EAAE,yBAAa,CAAC,OAAO;YAC9B,KAAK,EAAE,yBAAa,CAAC,OAAO;YAC5B,KAAK,EAAE,yBAAa,CAAC,OAAO;SAC/B,CAAC;QAEF,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,SAAS,GAAG,yBAAa,CAAC,WAAW,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC;IACvE,CAAC;IACD,OAAO,YAAC,EAAU;QACd,MAAM,CAAC,yBAAa,CAAC,WAAW,CAAC;IACrC,CAAC;CACJ,CAAC;AAEF,IAAM,UAAU,GAAG,UAAC,KAA2C;IAC3D,OAAO,CAAC,OAAO,CAAC,UAAC,MAAM;QACnB,IAAM,OAAO,GAAG,mBAAmB,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5E,MAAM,CAAC,UAAU,CACb;YACI,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,OAAO;YAC3B,QAAQ,EAAE,OAAO;YACjB,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI;SAC9B,CAAC,CAAC;IACX,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,gBAAuB,OAAgB,EAAE,MAAuB;IAC5D,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;QACV,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,4BAAO,CAAC,SAAS,CAAuB,SAAS,EAAE,UAAU,CAAC,CAAC;QACnE,CAAC;QAAA,CAAC;QACF,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACzB,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,OAAO,GAAG,OAAO,CAAC,MAAM,CAAC,UAAC,CAAC,IAAK,OAAA,CAAC,IAAI,MAAM,EAAX,CAAW,CAAC,CAAC;QAC7C,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;YACvB,4BAAO,CAAC,WAAW,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;QAC/C,CAAC;IACL,CAAC;AACL,CAAC;AAZD,wBAYC","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for details.\r\nimport TelemetryClient = require(\"../../Library/TelemetryClient\");\r\nimport { SeverityLevel } from \"../../Declarations/Contracts\";\r\n\r\nimport { channel, IStandardEvent } from \"diagnostic-channel\";\r\n\r\nimport { winston } from \"diagnostic-channel-publishers\";\r\n\r\nlet clients: TelemetryClient[] = [];\r\n\r\nconst winstonToAILevelMap: { [key: string]: (og: string) => number } = {\r\n    syslog(og: string) {\r\n        const map: { [key: string ]: number } = {\r\n            emerg: SeverityLevel.Critical,\r\n            alert: SeverityLevel.Critical,\r\n            crit: SeverityLevel.Critical,\r\n            error: SeverityLevel.Error,\r\n            warning: SeverityLevel.Warning,\r\n            notice: SeverityLevel.Information,\r\n            info: SeverityLevel.Information,\r\n            debug: SeverityLevel.Verbose\r\n        };\r\n\r\n        return map[og] === undefined ? SeverityLevel.Information : map[og];\r\n    },\r\n    npm(og: string) {\r\n        const map: { [key: string ]: number } = {\r\n            error: SeverityLevel.Error,\r\n            warn: SeverityLevel.Warning,\r\n            info: SeverityLevel.Information,\r\n            verbose: SeverityLevel.Verbose,\r\n            debug: SeverityLevel.Verbose,\r\n            silly: SeverityLevel.Verbose\r\n        };\r\n        \r\n        return map[og] === undefined ? SeverityLevel.Information : map[og];\r\n    },\r\n    unknown(og: string) {\r\n        return SeverityLevel.Information;\r\n    }\r\n};\r\n\r\nconst subscriber = (event: IStandardEvent<winston.IWinstonData>) => {\r\n    clients.forEach((client) => {\r\n        const AIlevel = winstonToAILevelMap[event.data.levelKind](event.data.level);\r\n        client.trackTrace(\r\n            {\r\n                message: event.data.message,\r\n                severity: AIlevel,\r\n                properties: event.data.meta\r\n            });\r\n    });\r\n};\r\n\r\nexport function enable(enabled: boolean, client: TelemetryClient) {\r\n    if (enabled) {\r\n        if (clients.length === 0) {\r\n            channel.subscribe<winston.IWinstonData>(\"winston\", subscriber);\r\n        };\r\n        clients.push(client);\r\n    } else {\r\n        clients = clients.filter((c) => c != client);\r\n        if (clients.length === 0) {\r\n            channel.unsubscribe(\"winston\", subscriber);\r\n        }\r\n    }\r\n}\r\n"]}