{"version":3,"file":"QuickPulseTelemetryProcessor.js","sourceRoot":"","sources":["../../TelemetryProcessors/QuickPulseTelemetryProcessor.ts"],"names":[],"mappings":";;AAGA,sEAAyE;AAEzE,sCAA6C,QAA4B,EAAE,MAA+B;IACtG,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QACT,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;QAE7B,0BAA0B;QAC1B,MAAM,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7B,KAAK,eAAe;gBAChB,sBAAsB,CAAC,cAAc,EAAE,CAAC;gBACxC,KAAK,CAAC;YACV,KAAK,aAAa;gBACd,gDAAgD;gBAChD,yDAAyD;gBACzD,0DAA0D;gBAC1D,KAAK,CAAC;YACV,KAAK,sBAAsB;gBACvB,IAAM,QAAQ,GAAoC,QAAQ,CAAC,IAAY,CAAC,QAAQ,CAAC;gBACjF,sBAAsB,CAAC,eAAe,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;gBAC5E,KAAK,CAAC;QACd,CAAC;IACL,CAAC;IACD,MAAM,CAAC,IAAI,CAAC;AAChB,CAAC;AArBD,oEAqBC","sourcesContent":["import Contracts = require(\"../Declarations/Contracts\");\r\nimport Logging = require(\"../Library/Logging\");\r\nimport QuickPulseStateManager = require(\"../Library/QuickPulseStateManager\")\r\nimport AutoCollectPerformance = require(\"../AutoCollection/Performance\");\r\n\r\nexport function quickPulseTelemetryProcessor(envelope: Contracts.Envelope, client?: QuickPulseStateManager): boolean {\r\n    if (client) {\r\n        client.addDocument(envelope);\r\n\r\n        // Increment rate counters\r\n        switch (envelope.data.baseType) {\r\n            case \"ExceptionData\":\r\n                AutoCollectPerformance.countException();\r\n                break;\r\n            case \"RequestData\":\r\n                // These are already autocounted by HttpRequest.\r\n                // Note: Not currently counting manual trackRequest calls\r\n                // here to avoid affecting existing autocollection metrics\r\n                break;\r\n            case \"RemoteDependencyData\":\r\n                const baseData: Contracts.RemoteDependencyData = (envelope.data as any).baseData;\r\n                AutoCollectPerformance.countDependency(baseData.duration, baseData.success);\r\n                break;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n"]}